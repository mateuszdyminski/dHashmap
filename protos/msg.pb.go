// Code generated by protoc-gen-go.
// source: msg.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	msg.proto

It has these top-level messages:
	HealthCheck
	Response
	Message
*/
package protos

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type HealthCheck struct {
	Origin string `protobuf:"bytes,1,opt,name=origin" json:"origin,omitempty"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}

type Response struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

type Message struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	OpType int32  `protobuf:"varint,2,opt,name=opType" json:"opType,omitempty"`
	Value  []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func init() {
}

// Client API for DMap service

type DMapClient interface {
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	Ping(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*Response, error)
}

type dMapClient struct {
	cc *grpc.ClientConn
}

func NewDMapClient(cc *grpc.ClientConn) DMapClient {
	return &dMapClient{cc}
}

func (c *dMapClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protos.DMap/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMapClient) Ping(ctx context.Context, in *HealthCheck, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protos.DMap/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DMap service

type DMapServer interface {
	Send(context.Context, *Message) (*Response, error)
	Ping(context.Context, *HealthCheck) (*Response, error)
}

func RegisterDMapServer(s *grpc.Server, srv DMapServer) {
	s.RegisterService(&_DMap_serviceDesc, srv)
}

func _DMap_Send_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Message)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DMapServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DMap_Ping_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(HealthCheck)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DMapServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _DMap_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DMap",
	HandlerType: (*DMapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _DMap_Send_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DMap_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
